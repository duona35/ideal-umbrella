#include <iostream>
#include <cmath>
using namespace std;

// 定义一个点的结构体
struct Point {
  double x;
  double y;
};

// 定义一个函数，计算两点之间的距离
double distance(Point a, Point b) {
  return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

// 定义一个函数，计算两点之间的中点
Point midpoint(Point a, Point b) {
  Point m;
  m.x = (a.x + b.x) / 2;
  m.y = (a.y + b.y) / 2;
  return m;
}

// 定义一个函数，计算两条线段的交点
Point intersection(Point a1, Point a2, Point b1, Point b2) {
  Point p;
  double a1x = a1.x;
  double a1y = a1.y;
  double a2x = a2.x;
  double a2y = a2.y;
  double b1x = b1.x;
  double b1y = b1.y;
  double b2x = b2.x;
  double b2y = b2.y;

  // 计算两条线段的斜率和截距
  double k1 = (a2y - a1y) / (a2x - a1x);
  double k2 = (b2y - b1y) / (b2x - b1x);
  double b1 = a1y - k1 * a1x;
  double b2 = b1y - k2 * b1x;

  // 计算交点的坐标
  p.x = (b2 - b1) / (k1 - k2);
  p.y = k1 * p.x + b1;

  return p;
}

// 定义一个函数，根据给定的五边形顶点，画出五角星
void draw_pentagram(Point p[5]) {
  // 计算五边形的边长
  double s = distance(p[0], p[1]);

  // 计算五边形的中心
  Point c;
  c.x = (p[0].x + p[1].x + p[2].x + p[3].x + p[4].x) / 5;
  c.y = (p[0].y + p[1].y + p[2].y + p[3].y + p[4].y) / 5;

  // 计算五个三角形的顶点
  Point q[5];
  for (int i = 0; i < 5; i++) {
    // 计算三角形的底边中点
    Point m = midpoint(p[i], p[(i + 1) % 5]);

    // 计算三角形的高
    double h = sqrt(s * s - s * s / 4);

    // 计算三角形的顶点坐标
    q[i].x = c.x + h * (m.x - c.x) / s * sqrt(3);
    q[i].y = c.y + h * (m.y - c.y) / s * sqrt(3);
  }

  // 计算五个星点
  Point r[5];
  for (int i = 0; i < 5; i++) {
    // 计算两条相邻三角形的交点
    r[i] = intersection(q[i], q[(i + 4) % 5], q[(i + 3) % 5], q[(i +
